{
  "clog": {
    "prefix": [
      "clog"
    ],
    "description": "Colored log",
    "body": [
      "console.log(",
      "\t'%c[        \\]%c ',",
      "\t'font-family:mono-space; color:white; background:orange',",
      "\t''",
      ");"
    ]
  },
  "its": {
    "prefix": [
      "its"
    ],
    "description": "it should",
    "body": [
      "it('should ${1}', () => {$2});"
    ]
  },
  "desc": {
    "prefix": [
      "desc"
    ],
    "description": "describe",
    "body": [
      "describe('$1', () => {",
      "\t$2",
      "})"
    ]
  },
  "Component": {
    "prefix": [
      "Component"
    ],
    "description": "React Component",
    "body": [
      "import React from 'react';",
      "import PropTypes from 'prop-types';",
      "",
      "const ${1:Name} = () => {",
      "\treturn <></>;",
      "};",
      "",
      "${1}.propTypes = {}",
      "",
      "export default ${1};"
    ]
  },
  "Test": {
    "prefix": [
      "Test"
    ],
    "description": "React Test",
    "body": [
      "import React from 'react';",
      "import { render } from '@testing-library/react';",
      "",
      "import ${1:Component} from './${1}';",
      "",
      "describe('${1}', () => {",
      "\tit('should render', () => {",
      "\t\trender(<${1} />);",
      "\t});",
      "});"
    ]
  },
  "tci": {
    "prefix": [
      "tci"
    ],
    "description": "Trans component import",
    "body": [
      "import { Trans } from 'react-i18next';"
    ]
  },
  "thi": {
    "prefix": [
      "thi"
    ],
    "description": "useTranslate hook import",
    "body": [
      "import { useTranslation } from 'react-i18next';"
    ]
  },
  "tc": {
    "prefix": [
      "tc"
    ],
    "description": "Trans component",
    "body": [
      "<Trans",
      "\ti18nKey=\"$1\"",
      "\tvalues={{ $2 }}",
      "\tcomponents={{ Strong: <Strong /> }}",
      "/>"
    ]
  },
  "th": {
    "prefix": [
      "th"
    ],
    "description": "Trans hook",
    "body": [
      "const { t } = useTranslation();"
    ]
  },
  "propid": {
    "prefix": [
      "propid"
    ],
    "description": "PropType id",
    "body": [
      "PropTypes.oneOfType([PropTypes.number, PropTypes.string])"
    ]
  },
  "recon": {
    "prefix": [
      "recon"
    ],
    "description": "Restore console.error",
    "body": [
      "beforeAll(() => console.error.mockRestore());"
    ]
  },
  "esm:dirname": {
    "prefix": [
      "dirname"
    ],
    "body": [
      "import { dirname } from 'path';",
      "import { fileURLToPath } from 'url';",
      "",
      "const __dirname = dirname(fileURLToPath(import.meta.url));"
    ]
  },
  "getter": {
    "prefix": "get",
    "body": "get ${1:property} () {\n\t${0}\n}"
  },
  "setter": {
    "prefix": "set",
    "body": "set ${1:property} (${2:value}) {\n\t${0}\n}"
  },
  "For-Of Loop": {
    "prefix": "forof",
    "body": [
      "for (const ${1:iterator} of ${2:object}) {",
      "\t$0",
      "}"
    ],
    "description": "For-Of Loop"
  },
  "Function Statement": {
    "prefix": "function",
    "body": [
      "function ${1:name}(${2:params}) {",
      "\t$0",
      "}"
    ],
    "description": "Function Statement"
  },
  "If Statement": {
    "prefix": "if",
    "body": [
      "if (${1:condition}) {",
      "\t$0",
      "}"
    ],
    "description": "If Statement"
  },
  "If-Else Statement": {
    "prefix": "else",
    "body": [
      "else {",
      "\t$0",
      "}"
    ],
    "description": "If-Else Statement"
  },
  "Switch Statement": {
    "prefix": "switch",
    "body": [
      "switch (${1:key}) {",
      "\tcase ${2:value}:",
      "\t\t$0",
      "\t\tbreak;",
      "}"
    ],
    "description": "Switch Statement"
  },
  "Try-Catch Statement": {
    "prefix": "trycatch",
    "body": [
      "try {",
      "\t$0",
      "} catch (${1:error}) {",
      "\t",
      "}"
    ],
    "description": "Try-Catch Statement"
  },
  "Log to console": {
    "prefix": "log",
    "body": [
      "console.log($1);",
      "$0"
    ],
    "description": "Log warning to the console"
  },
  "Log warning to console": {
    "prefix": "warn",
    "body": [
      "console.warn($1);",
      "$0"
    ],
    "description": "Log warning to the console"
  },
  "Log error to console": {
    "prefix": "error",
    "body": [
      "console.error($1);",
      "$0"
    ],
    "description": "Log error to the console"
  }
}
